name: "Code Sign Action"
description: "A GitHub Action for code signing files. Particularly those generated with vercel/pkg."
inputs:
  # Required
  file:
    description: "The file to sign"
    required: true
  certificate-data:
    description: "A base64 encoded string of your p12 or pfx cert contents"
    required: true
  certificate-password:
    description: "The password to unlock the certificate-data"
    required: true
  # Optional
  apple-team-id:
    description: "The architecture to build for x64|amd64|aarch64|arm64"
    required: false

outputs:
  file:
    description: "The path to the signed binary."
    value: ${{ steps.code-sign-action.outputs.file }}

runs:
  using: composite
  steps:
    - name: Validate required inputs
      shell: bash
      if: runner.os != 'Linux'
      run: |
        echo "::group::Ensure file is set"
        if [ "${{ inputs.file }}" == "" ]; then
          echo "::error title=File is not set!::You must specify a file to sign!"
          exit 1
        fi
        echo "::endgroup::"

        echo "::group::Ensure cert data is set"
        if [ "${{ inputs.certificate-data }}" == "" ]; then
          echo "::error title=Cert data is not set!::You must specify the cert you want to sign with!"
          exit 2
        fi
        echo "::endgroup::"

        echo "::group::Ensure certificate password is set"
        if [ "${{ inputs.certificate-password }}" == "" ]; then
          echo "::error title=Cert password is not set!::You must specify the password to unlock the cert with!"
          exit 2
        fi
        echo "::endgroup::"

    - name: Validate macos specific inputs
      shell: bash
      if: runner.os == 'macOS'
      run: |
        echo "::group::Ensure Apple Team ID is set"
        if [ "${{ inputs.apple-team-id }}" == "" ]; then
          echo "::error title=File is not set!::You must specify a file to sign!"
          exit 1
        fi
        echo "::endgroup::"

    - name: Import certs
      shell: bash
      if: runner.os == 'macOS'
      env:
        APPLE_CERT_DATA: ${{ inputs.certificate-data }}
        APPLE_CERT_PASSWORD: ${{ inputs.certificate-password }}
        APPLE_TEAM_ID: ${{ inputs.apple-team-id }}
      run: |
        # Export certs
        echo "$APPLE_CERT_DATA" | base64 --decode > /tmp/certs.p12
        # Create keychain
        security create-keychain -p actions macos-build.keychain
        security default-keychain -s macos-build.keychain
        security unlock-keychain -p actions macos-build.keychain
        security set-keychain-settings -t 3600 -u macos-build.keychain
        # Import certs to keychain
        security import /tmp/certs.p12 -k ~/Library/Keychains/macos-build.keychain -P "$APPLE_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/productsign
        # Key signing
        security set-key-partition-list -S apple-tool:,apple: -s -k actions macos-build.keychain
        # Verify the things
        security find-identity -v macos-build.keychain | grep "$APPLE_TEAM_ID" | grep "Developer ID Application"
        security find-identity -v macos-build.keychain | grep "$APPLE_TEAM_ID" | grep "Developer ID Installer"
    - name: Import certs
      shell: powershell
      if: runner.os == 'Windows'
      env:
        WINDOZE_CERT_DATA: ${{ inputs.certificate-data }}
        WINDOZE_CERT_PASSWORD: ${{ inputs.certificate-password }}
      run: |
        $ErrorActionPreference = "Stop"
        # Get some things for cert opts
        $temp_dir = $env:TMP
        $cert_data = $env:WINDOZE_CERT_DATA
        $cert_path = "$temp_dir\lando.windoze.p12"
        $cert_password = $env:WINDOZE_CERT_PASSWORD
        $cert_secure_password = $null
        # Export certs
        Write-Output "Cert detected!"
        # Decode and dump to temp file
        If (!(Test-Path $cert_path)) {
          Write-Output "Dumping cert to $cert_path..."
          $bytes = [Convert]::FromBase64String($cert_data)
          [IO.File]::WriteAllBytes($cert_path, $bytes)
        }
        # Verify the cert and password are good
        Write-Output "Verifying cert is good to go..."
        $cert_secure_password = ConvertTo-SecureString $cert_password -AsPlainText -Force
        Import-PfxCertificate -FilePath "$cert_path" -Password $cert_secure_password -CertStoreLocation "Cert:\LocalMachine\My"
        # If we get this far we should be good!
        Write-Output "We can sign!"
